apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-setup-script
data:
  install.sh: |
  #!/bin/bash
  set -e -o pipefail

  KEYCLOAK_TOKEN=$(curl -sS  --fail-with-body -X POST -H "Content-Type: application/x-www-form-urlencoded" \
  --data-urlencode "username=cnoe-admin" \
  --data-urlencode "password=${ADMIN_PASSWORD}" \
  --data-urlencode "grant_type=password" \
  --data-urlencode "client_id=admin-cli" \
  backstage:7007/realms/master/protocol/openid-connect/token | jq -e -r '.access_token')

  envsubst < config-payloads/client-payload.json > config-payloads/client-payload-to-be-applied.json

  curl -sS -H "Content-Type: application/json" \
  -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
  -X POST --data @config-payloads/client-payload-to-be-applied.json \
  backstage:7007/admin/realms/cnoe/clients

  CLIENT_ID=$(curl -sS -H "Content-Type: application/json" \
  -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
  -X GET backstage:7007/admin/realms/cnoe/clients | jq -e -r  '.[] | select(.clientId == "backstage") | .id')

  export CLIENT_SECRET=$(curl -sS -H "Content-Type: application/json" \
  -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
  -X GET backstage:7007/admin/realms/cnoe/clients/${CLIENT_ID} | jq -e -r '.secret')

  CLIENT_SCOPE_GROUPS_ID=$(curl -sS -H "Content-Type: application/json" -H "Authorization: bearer ${KEYCLOAK_TOKEN}" -X GET  backstage:7007/admin/realms/cnoe/client-scopes | jq -e -r  '.[] | select(.name == "groups") | .id')

  curl -sS -H "Content-Type: application/json" -H "Authorization: bearer ${KEYCLOAK_TOKEN}" -X PUT  backstage:7007/admin/realms/cnoe/clients/${CLIENT_ID}/default-client-scopes/${CLIENT_SCOPE_GROUPS_ID}


  pass=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

  token=$(curl -sS localhost:8085/api/v1/session -d "{\"username\":\"admin\",\"password\":\"${pass}\"}" | yq .token)

# THIS DOES NOT EXPIRE. Has read all permissions.
  argocdToken=$(curl -sS http://localhost:8085/api/v1/account/backstage/token -X POST -H "Authorization: Bearer ${token}" | yq .token)

  echo 'storing client secrets to backstage namespace'
  envsubst < secret-env-var.yaml | kubectl apply -f -
  envsubst < secret-integrations.yaml | kubectl apply -f -

#If TLS secret is available in /private, use it. Could be empty...
  if ls ${REPO_ROOT}/private/backstage-tls-backup-* 1> /dev/null 2>&1; then
      TLS_FILE=$(ls -t ${REPO_ROOT}/private/backstage-tls-backup-* | head -n1)
      kubectl apply -f ${TLS_FILE}
  fi